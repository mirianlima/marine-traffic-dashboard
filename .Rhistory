unzip("../data/ships_04112020.zip", exdir = "./data")
devtools::load_all(".")
# Initialize reactive data
ships <- reactiveValues(data = NULL)
source('~/Documents/appsilon/marine-traffic-dashboard/R/app-copy2.R', echo=TRUE)
marineApp()
devtools::load_all(".")
source('~/Documents/marine-traffic-dashboard/R/app-copy2.R', echo=TRUE)
marineApp()
source('~/Documents/marine-traffic-dashboard/R/data-prep.R', echo=TRUE)
unzip("../data/ships_04112020.zip", exdir = "../data")
devtools::load_all(".")
marineApp()
# Load data
vessels <- fread("../data/vessels.csv")
library(readr)
vessels <- read_csv("data/vessels.csv")
View(vessels)
# Load data
vessels <- fread("data/vessels.csv")
# Load data
vessels2 <- fread("data/vessels.csv")
marineApp()
devtools::load_all(".")
marineApp()
devtools::load_all(".")
marineApp()
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='mlima',
token='67C1F6CE230295DE4E152295C7D24247',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mlima',
token='67C1F6CE230295DE4E152295C7D24247',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mlima',
token='5C867407B7EDFCDB5ABB58B6EC4568E5',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
rsconnect::setAccountInfo(name='mlima',
token='5C867407B7EDFCDB5ABB58B6EC4568E5',
secret='<SECRET>')
remove.packages(rsconnect)
remove.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='mlima',
token='5C867407B7EDFCDB5ABB58B6EC4568E5',
secret='BaR2zsLiUert46su/NZvS5YaDhREFG4aJQmNu8Z6')
devtools::load_all(".")
marineApp
marineApp()
getwd()
rsconnect::deployApp(appDir = '"/Users/mlima/Documents/marine-traffic-dashboard"',appFiles=c('R/app.R','R/function.R','data/ships_clean.csv','data/vessels.csv'),
account = 'mlime', server = 'shinyapps.io')
rsconnect::deployApp(appDir = '/Users/mlima/Documents/marine-traffic-dashboard',appFiles=c('R/app.R','R/function.R','data/ships_clean.csv','data/vessels.csv'),
account = 'mlime', server = 'shinyapps.io')
marineApp()
shiny::runApp('R')
sessionInfo()
version
?update.packages()
install.packages("testthat")
library(testthat)
sessionInfo()
clear
clear()
c
devtools::load_all(".")
marineApp()
runApp('R')
marineApp()
runApp('R')
marineApp()
load_data <- function(ship_name){
fread('data/ships_clean.csv') %>%
filter(shipname == ship_name) %>%
unique() %>%
as_tibble()
}
x <- load_data("Akacia")
indexes <-
x %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
)
View(indexes)
map_data <-
data %>%
filter(ID == indexes$previous | ID == indexes$max) %>%
select(ID,shipname, ship_type, datetime,lat, lon, distance, port, speed) %>%
as_tibble()
map_data <-
x %>%
filter(ID == indexes$previous | ID == indexes$max) %>%
select(ID,shipname, ship_type, datetime,lat, lon, distance, port, speed) %>%
as_tibble()
View(map_data)
marineApp()
typeof(indexes)
typeof(as.vector(indexes))
indexes <-
x %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
) %>%
as_tibble()
typeof(indexes)
indexes
marineApp()
View(x)
typeof(x)
indexes
marineApp()
calculate_max_distance(x)
calculate_max_distance <- function(data){
indexes <-
data %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
) %>%
as_tibble()
cols <- c(ID,shipname, ship_type, datetime,lat, lon, distance, port, speed)
data[ID == indexes$previous | ID == indexes$max, cols]
}
calculate_max_distance(x)
calculate_max_distance <- function(data){
indexes <-
data %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
) %>%
as_tibble()
cols <- c(ID,shipname, ship_type, datetime,lat, lon, distance, port, speed)
data[data$ID == indexes$previous | data$ID == indexes$max, cols]
}
calculate_max_distance(x)
calculate_max_distance <- function(data){
indexes <-
data %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
) %>%
as_tibble()
cols <- c("ID","shipname", "ship_type", "datetime","lat", "lon", "distance", "port", "speed")
data[data$ID == indexes$previous | data$ID == indexes$max, cols]
}
calculate_max_distance(x)
marineApp()
devtools::load_all(".")
marineApp()
devtools::load_all(".")
marineApp()
x <- load_data("Akacia")
indexes <-
x %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = as.character(as.numeric(max)-1)
) %>%
as_tibble()
typeof(indexes$max)
typeof(indexes$previous)
typeof(x$ID)
indexes <-
x %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = max-1
) %>%
as_tibble()
typeof(indexes$max)
typeof(indexes$previous)
cols <- c("ID","shipname", "ship_type", "datetime","lat", "lon", "distance", "port", "speed")
x[x$ID == indexes$previous | x$ID == indexes$max, cols]
calculate_max_distance <- function(data){
indexes <-
data %>%
slice_max(distance) %>%
slice_max(datetime) %>%
transmute(
max = ID,
previous = max-1
) %>%
as_tibble()
cols <- c("ID","shipname", "ship_type", "datetime","lat", "lon", "distance", "port", "speed")
data[data$ID == indexes$previous | data$ID == indexes$max, cols]
}
calculate_max_distance(x)
devtools::load_all(".")
marineApp()
devtools::load_all(".")
marineApp()
